rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId);
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Defines a match statement for the /farmers/{farmerId} collection.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user123' can create a farmer document with id 'user123'.
     * @deny (create) User with UID 'user123' cannot create a farmer document with id 'user456'.
     * @allow (get) User with UID 'user123' can get a farmer document with id 'user123'.
     * @deny (get) User with UID 'user123' cannot get a farmer document with id 'user456'.
     * @allow (update) User with UID 'user123' can update a farmer document with id 'user123'.
     * @deny (update) User with UID 'user123' cannot update a farmer document with id 'user456'.
     * @allow (delete) User with UID 'user123' can delete a farmer document with id 'user123'.
     * @deny (delete) User with UID 'user123' cannot delete a farmer document with id 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines a match statement for the /farmers/{farmerId}/transactions/{transactionId} collection.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction under /farmers/user123.
     * @deny (create) User with UID 'user123' cannot create a transaction under /farmers/user456.
     * @allow (get) User with UID 'user123' can get a transaction under /farmers/user123.
     * @deny (get) User with UID 'user123' cannot get a transaction under /farmers/user456.
     * @allow (update) User with UID 'user123' can update a transaction under /farmers/user123.
     * @deny (update) User with UID 'user123' cannot update a transaction under /farmers/user456.
     * @allow (delete) User with UID 'user123' can delete a transaction under /farmers/user123.
     * @deny (delete) User with UID 'user123' cannot delete a transaction under /farmers/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines a match statement for the /farmers/{farmerId}/cultivationGuides/{guideId} collection.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user123' can create a guide under /farmers/user123.
     * @deny (create) User with UID 'user123' cannot create a guide under /farmers/user456.
     * @allow (get) User with UID 'user123' can get a guide under /farmers/user123.
     * @deny (get) User with UID 'user123' cannot get a guide under /farmers/user456.
     * @allow (update) User with UID 'user123' can update a guide under /farmers/user123.
     * @deny (update) User with UID 'user123' cannot update a guide under /farmers/user456.
     * @allow (delete) User with UID 'user123' can delete a guide under /farmers/user123.
     * @deny (delete) User with UID 'user123' cannot delete a transaction under /farmers/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines a match statement for the /farms/{farmId} collection.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user123' can create a farm if farm.farmerId == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a farm if farm.farmerId != 'user123'.
     * @allow (get) Anyone can read farm data.
     * @allow (list) Anyone can list farm data.
     * @allow (update) User with UID 'user123' can update a farm if farm.farmerId == 'user123'.
     * @deny (update) User with UID 'user123' cannot update a farm if farm.farmerId != 'user123'.
     * @allow (delete) User with UID 'user123' can delete a farm if farm.farmerId == 'user123'.
     * @deny (delete) User with UID 'user123' cannot delete a farm if farm.farmerId != 'user123'.
     * @principle Public read access with owner-only writes, enforces farmerId ownership.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.farmerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Defines a match statement for the /weather_forecasts/{weatherForecastId} collection.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Anyone can read weather forecast data.
     * @allow (list) Anyone can list weather forecast data.
     * @deny (create) No one can create weather forecast data directly.
     * @deny (update) No one can update weather forecast data directly.
     * @deny (delete) No one can delete weather forecast data directly.
     * @principle Public read access, no write access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines a match statement for the /learning_articles/{learningArticleId} collection.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Anyone can read learning articles.
     * @allow (list) Anyone can list learning articles.
     * @deny (create) No one can create learning articles directly.
     * @deny (update) No one can update learning articles directly.
     * @deny (delete) No one can delete learning articles directly.
     * @principle Public read access, no write access.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Defines a match statement for the /roles_admin/{uid} collection.
     * @path /roles_admin/{uid}
     * @allow (get) Anyone can read admin roles data.
     * @allow (list) No one can list admin roles data.
     * @deny (create) No one can create admin roles data directly.
     * @deny (update) No one can update admin roles data directly.
     * @deny (delete) No one can delete admin roles data directly.
     */
     match /roles_admin/{uid} {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
    
    /**
     * @description Defines a match statement for the /forumPosts/{postId} collection.
     * @path /forumPosts/{postId}
     * @allow (get) Anyone can read a forum post.
     * @allow (list) Anyone can list forum posts.
     * @allow (create) Any signed in user can create a forum post.
     * @allow (update) Only the owner can update likes, creation is not allowed.
     * @deny (delete) No one can delete forum posts.
     * @principle Public read access with owner-only writes to likes, and isSignedIn() check on create
     */
    match /forumPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if false;
    }
  }
}