/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 * allows public read access to weather forecasts and learning articles, and restricts
 * administrative functions to designated users.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Farmer profile data, where {farmerId} is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Financial transactions for a farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Cultivation guides for a farmer.
 * - /farms/{farmId}: Farm data, with a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Publicly readable weather forecasts.
 * - /learning_articles/{learningArticleId}: Publicly readable learning articles.
 * - /roles_admin/{uid}: Documents indicating admin roles; presence of a document grants admin access.
 * - /forumPosts/{postId}: Forum posts created by users.
 *
 * Key Security Decisions:
 * - User data (farmers and their transactions/guides) is strictly controlled by the user's UID.
 * - Listing of farmer documents is disallowed for privacy.
 * - Weather forecasts and learning articles are publicly readable.
 * - Administrative privileges are determined by the presence of a document in /roles_admin/{uid}.
 *
 * Denormalization for Authorization:
 * - Farm documents contain a 'farmerId' field to simplify ownership checks.
 *
 * Structural Segregation:
 * - Public (weather, learning) and private (farmer data) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource, using the path.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource, using the path, and confirms the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{uid}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Rules for farmer profiles.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user123' creates a profile document where farmerId == 'user123'.
     * @deny (create) User with UID 'user123' attempts to create a profile document where farmerId != 'user123'.
     * @deny (list) Any user attempts to list farmer documents.
     * @principle Enforces document ownership for writes and prevents unauthorized listing.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farmer transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' creates a transaction under their profile.
     * @deny (update) User with UID 'user456' attempts to update a transaction under 'user123''s profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farmer cultivation guides.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user123' creates a guide under their profile.
     * @deny (update) User with UID 'user456' attempts to update a guide under 'user123''s profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId) && request.resource.data.userId == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}
     * @allow (get, list) Any user can read farm data.
     * @allow (create) User with UID 'user123' creates a farm with farmerId == 'user123'.
     * @deny (update) User with UID 'user456' attempts to update a farm where resource.data.farmerId != 'user456'.
     * @principle Public read with owner-only writes, enforces document ownership for writes.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.resource.data.farmerId == resource.data.farmerId;
      allow delete: if isSignedIn() && resource != null && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Rules for weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Any user can read weather forecast data.
     * @deny (create, update, delete) No one can create, update, or delete weather forecast data through client-side rules.
     * @principle Public read, no client-side writes allowed.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Any user can read learning articles.
     * @deny (create, update, delete) No one can create, update, or delete learning articles through client-side rules.
     * @principle Public read, no client-side writes allowed.
     */
    match /learning_articles/{learningArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (get) Any admin can check if another user is also an admin.
     * @allow (create) Only an existing admin can create new admin roles.
     * @deny (list, update, delete) Listing is not allowed, and updates/deletes are not permitted via client rules.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Rules for forum posts.
     * @path /forumPosts/{postId}
     * @allow (get, list) Any user can read forum posts.
     * @allow (create) Any signed-in user can create a post. Author ID must match the user's UID.
     * @allow (update, delete) Only the author can update or delete their own post.
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /forumPosts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.authorId == request.auth.uid;
    }
  }
}