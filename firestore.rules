/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 * segregates data types into distinct collections, and implements role-based access
 * control for administrative functions.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Stores personal data, owned by the user with matching UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Stores transaction data, owned by the user with matching UID.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides, owned by the user with matching UID.
 * - /farms/{farmId}: Stores farm data, with a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Stores publicly readable weather data.
 * - /learning_articles/{learningArticleId}: Stores publicly readable learning articles.
 * - /roles_admin/{uid}: Presence of a document indicates admin role for the user.
 * - /forumPosts/{postId}: Stores forum posts.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the user.
 * - Weather forecasts and learning articles are publicly readable.
 * - Listing of farmer documents is disallowed.
 * - Admin roles are managed via a dedicated collection.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `farms` collection denormalizes the `farmerId` field to allow direct
 *   authorization checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure root access. No read or write access to root.
     * @path /
     * @allow (get) true: Never. Root access is not allowed.
     * @deny (create) true: Never. Root access is not allowed.
     * @principle Root access is disallowed.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages farmer profiles. Only the authenticated farmer can read/write their own profile.
     * @path /farmers/{farmerId}
     * @allow (create) Signed-in user with matching UID in path.
     * @allow (get) Signed-in user with matching UID in path.
     * @allow (update) Signed-in user with matching UID in path.
     * @allow (delete) Signed-in user with matching UID in path.
     * @deny (create) Signed-in user with non-matching UID in path.
     * @deny (get) Signed-in user with non-matching UID in path.
     * @deny (update) Signed-in user with non-matching UID in path.
     * @deny (delete) Signed-in user with non-matching UID in path.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Manages financial transactions for a specific farmer. Only the owner can read/write.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) Signed-in user with matching UID in path.
     * @allow (get) Signed-in user with matching UID in path.
     * @allow (update) Signed-in user with matching UID in path.
     * @allow (delete) Signed-in user with matching UID in path.
     * @deny (create) Signed-in user with non-matching UID in path.
     * @deny (get) Signed-in user with non-matching UID in path.
     * @deny (update) Signed-in user with non-matching UID in path.
     * @deny (delete) Signed-in user with non-matching UID in path.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

     /**
      * @description Manages cultivation guides for a specific farmer. Only the owner can read/write.
      * @path /farmers/{farmerId}/cultivationGuides/{guideId}
      * @allow (create) Signed-in user with matching UID in path.
      * @allow (get) Signed-in user with matching UID in path.
      * @allow (update) Signed-in user with matching UID in path.
      * @allow (delete) Signed-in user with matching UID in path.
      * @deny (create) Signed-in user with non-matching UID in path.
      * @deny (get) Signed-in user with non-matching UID in path.
      * @deny (update) Signed-in user with non-matching UID in path.
      * @deny (delete) Signed-in user with non-matching UID in path.
      * @principle Enforces document ownership for writes.
      */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Manages farm data. Only the farmer who owns the farm (farmerId) can create, update, or delete it. Anyone can read.
     * @path /farms/{farmId}
     * @allow (create) Signed-in user creates farm with matching UID in data.
     * @allow (get) Any user can read farm data.
     * @allow (update) Signed-in user with matching farmerId in existing data.
     * @allow (delete) Signed-in user with matching farmerId in existing data.
     * @deny (create) Signed-in user creates farm with non-matching UID in data.
     * @deny (update) Signed-in user with non-matching farmerId in existing data.
     * @deny (delete) Signed-in user with non-matching farmerId in existing data.
     * @principle Public read, owner-only write.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.farmerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Manages weather forecast data. Publicly readable.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Any user can read weather data.
     * @principle Public read, no write access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages learning articles. Publicly readable.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Any user can read learning articles.
     * @principle Public read, no write access.
     */
    match /learning_articles/{learningArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Manages admin roles. Only accessible by backend functions.
      * @path /roles_admin/{uid}
      */
    match /roles_admin/{uid} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts.
     * @path /forumPosts/{postId}
     */
    match /forumPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;

        /**
         * @description Manages likes for a forum post.  Anyone can read, only authenticated users can write.
         * @path /forumPosts/{postId}/likes/{likeId}
         */
        match /likes/{likeId} {
          allow get: if true;
          allow list: if true;
          allow create: if isSignedIn();
          allow update: if false;
          allow delete: if false;
        }
    }
  }
}