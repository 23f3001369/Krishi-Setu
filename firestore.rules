/**
 * @description This ruleset enforces a strict user-ownership model for farmer data and shared access control for forum posts. Public read access is granted for weather forecasts and learning articles.
 * @dataStructure
 *   - /farmers/{farmerId}: Stores farmer profiles, owned by the user with the matching UID.
 *   - /farmers/{farmerId}/transactions/{transactionId}: Stores transactions for a farmer, only accessible by the farmer.
 *   - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides for a farmer, only accessible by the farmer.
 *   - /farms/{farmId}: Stores farm data, owned by the farmer specified in the 'farmerId' field.
 *   - /weather_forecasts/{weatherForecastId}: Stores weather forecasts, publicly readable.
 *   - /learning_articles/{learningArticleId}: Stores learning articles, publicly readable.
 *   - /roles_admin/{uid}: Indicates admin status for a user.
 *   - /forumPosts/{postId}: Stores forum posts, accessible with specific rules for likes (inferred from error).
 *   - /forumPosts/{postId}/likes/{likeId}: Stores likes for a forum post, accessible with specific rules.
 * @keySecurityDecisions
 *   - Strict user ownership is enforced for farmer data and their related subcollections (transactions, cultivation guides).
 *   - Public read access is granted for weather forecasts and learning articles.
 *   - Admin roles are managed through the `/roles_admin/{uid}` collection.
 *   - Forum posts and their likes have specific rules to control access.
 * @denormalizationForAuthorization
 *   - Farm documents contain a `farmerId` field to simplify ownership checks.
 * @structuralSegregation
 *   - Private user data (farmer profiles, transactions, cultivation guides) is stored under the `/farmers/{farmerId}` path, separate from public data (weather forecasts, learning articles).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to farmer profiles based on user ownership.
     * @path /farmers/{farmerId}
     * @allow (create) Authenticated user with UID 'user123' can create a farmer profile with farmerId = 'user123'.
     * @allow (get) Authenticated user with UID 'user123' can read their own farmer profile at /farmers/user123.
     * @allow (update) Authenticated user with UID 'user123' can update their own farmer profile at /farmers/user123.
     * @allow (delete) Authenticated user with UID 'user123' can delete their own farmer profile at /farmers/user123.
     * @deny (create) Authenticated user with UID 'user123' cannot create a farmer profile with farmerId = 'user456'.
     * @deny (get) Authenticated user with UID 'user123' cannot read another user's farmer profile at /farmers/user456.
     * @principle Enforces document ownership for writes and reads.
     */
    match /farmers/{farmerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Grants access to transactions based on farmer ownership.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) Authenticated user with UID 'user123' can create a transaction under /farmers/user123/transactions/tx1.
     * @allow (get) Authenticated user with UID 'user123' can read their transaction at /farmers/user123/transactions/tx1.
     * @allow (update) Authenticated user with UID 'user123' can update their transaction at /farmers/user123/transactions/tx1.
     * @allow (delete) Authenticated user with UID 'user123' can delete their transaction at /farmers/user123/transactions/tx1.
     * @deny (create) Authenticated user with UID 'user123' cannot create a transaction under /farmers/user456/transactions/tx1.
     * @deny (get) Authenticated user with UID 'user123' cannot read another user's transaction at /farmers/user456/transactions/tx1.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Grants access to cultivation guides based on farmer ownership.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) Authenticated user with UID 'user123' can create a cultivation guide under /farmers/user123/cultivationGuides/guide1.
     * @allow (get) Authenticated user with UID 'user123' can read their cultivation guide at /farmers/user123/cultivationGuides/guide1.
     * @allow (update) Authenticated user with UID 'user123' can update their cultivation guide at /farmers/user123/cultivationGuides/guide1.
     * @allow (delete) Authenticated user with UID 'user123' can delete their cultivation guide at /farmers/user123/cultivationGuides/guide1.
     * @deny (create) Authenticated user with UID 'user123' cannot create a cultivation guide under /farmers/user456/cultivationGuides/guide1.
     * @deny (get) Authenticated user with UID 'user123' cannot read another user's cultivation guide at /farmers/user456/cultivationGuides/guide1.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId) && request.resource.data.userId == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Grants access to farm data based on farmer ownership.
     * @path /farms/{farmId}
     * @allow (create) Authenticated user with UID 'user123' can create a farm if farm.farmerId == 'user123'.
     * @allow (get) Anyone can read farm data.
     * @allow (list) Anyone can list farm data.
     * @allow (update) Authenticated user with UID 'user123' can update a farm if they own it (farm.farmerId == 'user123').
     * @allow (delete) Authenticated user with UID 'user123' can delete a farm if they own it (farm.farmerId == 'user123').
     * @deny (create) Authenticated user with UID 'user123' cannot create a farm if farm.farmerId != 'user123'.
     * @deny (update) Authenticated user with UID 'user123' cannot update a farm they don't own (farm.farmerId != 'user123').
     * @principle Enforces document ownership for writes, public read access.
     */
    match /farms/{farmId} {
      function isOwner(farmerId) {
        return request.auth != null && request.auth.uid == farmerId;
      }

      function isExistingOwner(farmerId) {
        return isOwner(farmerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.farmerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.farmerId);
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Grants public read access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Anyone can read weather forecast data.
     * @allow (list) Anyone can list weather forecast data.
     * @deny (create) No one can create weather forecast data via client-side rules.
     * @deny (update) No one can update weather forecast data via client-side rules.
     * @deny (delete) No one can delete weather forecast data via client-side rules.
     * @principle Provides public read access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Anyone can read learning articles.
     * @allow (list) Anyone can list learning articles.
     * @deny (create) No one can create learning articles via client-side rules.
     * @deny (update) No one can update learning articles via client-side rules.
     * @deny (delete) No one can delete learning articles via client-side rules.
     * @principle Provides public read access.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages admin roles. Presence of a document signifies admin status.
     * @path /roles_admin/{uid}
     * @allow (get) Anyone can check for admin status.
     * @deny (create) No one can create admin roles via client-side rules.
     * @deny (update) No one can update admin roles via client-side rules.
     * @deny (delete) No one can delete admin roles via client-side rules.
     * @principle  Restricts modification of admin roles.
     */
    match /roles_admin/{uid} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages forum posts.
     * @path /forumPosts/{postId}
     */
    match /forumPosts/{postId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(authorId) {
            return request.auth != null && request.auth.uid == authorId;
        }

        function isExistingOwner(authorId) {
            return isOwner(authorId) && resource != null;
        }

        allow get: if true; // Allow anyone to read posts
        allow list: if true; // Allow anyone to list posts
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid; // Only signed-in users can create posts
        allow update: if isExistingOwner(resource.data.authorId); // Only the author can update
        allow delete: if isExistingOwner(resource.data.authorId); // Only the author can delete
    }
    
    /**
     * @description Manages likes for forum posts.
     * @path /forumPosts/{postId}/likes/{likeId}
     * @allow (list) Only signed-in users can list likes for a post.
     * @principle Restricts listing likes to authenticated users.
     */
    match /forumPosts/{postId}/likes/{likeId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if true; //allow anyone to read the number of likes
        allow list: if isSignedIn(); // Only signed-in users can list likes
        allow create: if isSignedIn(); // Only signed-in users can create a like
        allow update: if false; // No one can update a like
        allow delete: if isSignedIn(); // Only signed-in users can delete their own like
    }
  }
}