rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to admin role documents.
     * @path /roles_admin/{uid}
     * @allow (get, create, update, delete) if the request is made by a user with the same UID.
     * @deny (get, create, update, delete) if the request is made by a user with a different UID.
     * @principle Enforces document ownership for writes.
     */
    match /roles_admin/{uid} {
        allow get: if request.auth.uid == uid;
        allow list: if false;
        allow create: if request.auth.uid == uid;
        allow update: if request.auth.uid == uid;
        allow delete: if request.auth.uid == uid;
    }

    /**
     * @description Allows access to farmer profiles.
     * @path /farmers/{farmerId}
     * @allow (get, list, create, update, delete) if the request is made by the farmer with the same ID.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Allows access to transactions for a specific farmer.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) if the request is made by the farmer with the same ID.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Allows access to cultivation guides for a specific farmer.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (get, list, create, update, delete) if the request is made by the farmer with the same ID.
     * @deny (get, list, create, update, delete) if the request is made by a different user.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Allows access to farm data.
     * @path /farms/{farmId}
     * @allow (get, list) if true.
     * @allow (create) if request.auth.uid == request.resource.data.farmerId.
     * @allow (update, delete) if request.auth.uid == resource.data.farmerId.
     * @deny (create, update, delete) if the farmerId doesn't match the authenticated user.
     * @principle Public read with owner-only writes, enforces relational integrity.
     */
    match /farms/{farmId} {
      function isOwner(farmerId) {
        return request.auth.uid == farmerId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.farmerId;
      allow update: if request.auth != null && isOwner(resource.data.farmerId);
      allow delete: if request.auth != null && isOwner(resource.data.farmerId);
    }

    /**
     * @description Allows public read access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // TODO: Add rules for admin users or trusted data sources.
     * @principle Public read, restricted write.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add rules for admin users or trusted data sources.
      allow update: if false; // TODO: Add rules for admin users or trusted data sources.
      allow delete: if false; // TODO: Add rules for admin users or trusted data sources.
    }

    /**
     * @description Allows public read access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // TODO: Add rules for admin users or trusted data sources.
     * @principle Public read, restricted write.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add rules for admin users or trusted data sources.
      allow update: if false; // TODO: Add rules for admin users or trusted data sources.
      allow delete: if false; // TODO: Add rules for admin users or trusted data sources.
    }

    /**
     * @description Allows access to forum posts.
     * @path /forumPosts/{postId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null;
     * @allow update: if request.auth.uid == resource.data.authorId && resource != null;
     * @allow delete: if request.auth.uid == resource.data.authorId && resource != null;
     * @principle Public read, owner-only updates and deletes.
     */
    match /forumPosts/{postId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isOwner(resource.data.authorId);
      allow delete: if request.auth != null && isOwner(resource.data.authorId);
    }

    /**
     * @description Allows access to comments for a specific post.
     * @path /forumPosts/{postId}/comments/{commentId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null;
     * @allow update: if request.auth.uid == resource.data.authorId && resource != null;
     * @allow delete: if request.auth.uid == resource.data.authorId && resource != null;
     * @principle Public read, owner-only updates and deletes.
     */
    match /forumPosts/{postId}/comments/{commentId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && isOwner(resource.data.authorId);
      allow delete: if request.auth != null && isOwner(resource.data.authorId);
    }

      /**
       * @description Allows access to replies for a specific comment.
       * @path /forumPosts/{postId}/comments/{commentId}/replies/{replyId}
       * @allow get, list: if true;
       * @allow create: if request.auth != null;
       * @allow update: if request.auth.uid == resource.data.authorId && resource != null;
       * @allow delete: if request.auth.uid == resource.data.authorId && resource != null;
       * @principle Public read, owner-only updates and deletes.
       */
    match /forumPosts/{postId}/comments/{commentId}/replies/{replyId} {
        function isOwner(authorId) {
            return request.auth.uid == authorId;
        }
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && isOwner(resource.data.authorId);
        allow delete: if request.auth != null && isOwner(resource.data.authorId);
    }

    /**
     * @description Allows access to chat metadata for authorized participants.
     * @path /chats/{chatId}
     * @allow get, list: if request.auth.uid in resource.data.participants;
     * @allow create: if request.auth.uid in request.resource.data.participants;
     * @allow update: if request.auth.uid in resource.data.participants && resource != null;
     * @allow delete: if false; // Deletion is not allowed.
     * @principle Shared access, restricted deletion.
     */
    match /chats/{chatId} {
        allow get: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
        allow list: if false;
        allow create: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
        allow update: if request.auth != null && resource.data.participants.hasAny([request.auth.uid]);
        allow delete: if false;
    }

    /**
     * @description Allows access to chat messages for authorized participants.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow get, list: if get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
     * @allow create: if request.auth.uid == request.resource.data.senderId;
     * @allow update, delete: if false; // Messages cannot be updated or deleted.
     * @principle Shared access, immutable messages.
     */
    match /chats/{chatId}/messages/{messageId} {
        allow get: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow list: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
        allow update: if false;
        allow delete: if false;
    }
    
    /**
     * @description This catch-all match prevents access to any path not explicitly defined.
     * @path /
     * @deny get, list, create, update, delete: if true;
     * @principle Default deny.
     */
    match /{path=**} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}