/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 *               allows public read access to weather forecasts and learning articles,
 *               and provides role-based access for administrators.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Farmer profiles, where farmerId is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Financial transactions for a farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Cultivation guides for a farmer.
 * - /farms/{farmId}: Farm data, with a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Weather forecast data (publicly readable).
 * - /learning_articles/{learningArticleId}: Learning articles (publicly readable).
 * - /roles_admin/{uid}: Admin role assignments (document existence grants admin status).
 * - /forumPosts/{postId}: Forum posts created by users.
 * - /forumPosts/{postId}/comments/{commentId}/replies/{replyId}: Replies to forum post comments.
 * - /chats/{chatId}: Metadata for chat conversations between users.
 * - /chats/{chatId}/messages/{messageId}: Messages within a chat conversation.
 *
 * Key Security Decisions:
 * - Strict ownership for farmer data: Only the authenticated farmer can access their profile, transactions, and cultivation guides.
 * - Public read access for weather forecasts and learning articles.
 * - Role-based access for admins: Admin status is determined by the existence of a document in the /roles_admin/{uid} collection.
 * - Data consistency: Enforces that the farmerId in the Farm document matches the authenticated user's UID for write operations.
 * - Forum posts can be created by any authenticated user, but only the author can update/delete them.
 * - Chats and ChatMessages are secured by checking for participant inclusion.
 *
 * Denormalization for Authorization:
 * - The `Farm` document includes a `farmerId` field to simplify ownership checks, avoiding the need for extra `get()` calls.
 * - Chats include a `participants` array to authorize read and write access to the chat and its messages.
 *
 * Structural Segregation:
 * - Private farmer data (transactions, cultivation guides) is stored under the /farmers/{farmerId} path, while public data (weather forecasts, learning articles) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to admin role documents.
     * @path /roles_admin/{uid}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list, create, update, delete) if !isAdmin()
     * @principle Role-based access control for admin status.
     */
    match /roles_admin/{uid} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Checks if the user is signed in.
     * @returns true if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns true if the authenticated user's UID matches the provided userId, false otherwise.
     * @example isOwner('someUserId')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     * @param {string} userId - The user ID to check against.
     * @returns true if the authenticated user's UID matches the provided userId, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns true if the user has an admin role document, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows access to farmer profile documents.
     * @path /farmers/{farmerId}
     * @allow get, list: if isOwner(farmerId);
     * @allow create: if isOwner(farmerId);
     * @allow update: if isExistingOwner(farmerId) && request.auth.uid == farmerId;
     * @allow delete: if isExistingOwner(farmerId);
     * @deny get, list, create, update, delete: if !isOwner(farmerId);
     * @principle Enforces document ownership for farmer profiles.
     */
    match /farmers/{farmerId} {
      allow get, list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId) && request.auth.uid == farmerId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to transaction documents for a specific farmer.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow get, list: if isOwner(farmerId);
     * @allow create: if isOwner(farmerId);
     * @allow update: if isExistingOwner(farmerId);
     * @allow delete: if isExistingOwner(farmerId);
     * @deny get, list, create, update, delete: if !isOwner(farmerId);
     * @principle Enforces document ownership for farmer transactions.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get, list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to cultivation guide documents for a specific farmer.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow get, list: if isOwner(farmerId);
     * @allow create: if isOwner(farmerId);
     * @allow update: if isExistingOwner(farmerId);
     * @allow delete: if isExistingOwner(farmerId);
     * @deny get, list, create, update, delete: if !isOwner(farmerId);
     * @principle Enforces document ownership for farmer cultivation guides.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get, list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to farm documents, enforcing farmerId consistency.
     * @path /farms/{farmId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.farmerId) && resource.data.farmerId == request.resource.data.farmerId;
     * @allow delete: if isExistingOwner(resource.data.farmerId);
     * @deny create, update, delete: if !isSignedIn();
     * @principle Enforces document ownership and data consistency for farms.
     */
    match /farms/{farmId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.farmerId) && resource.data.farmerId == request.resource.data.farmerId;
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Allows public read access to weather forecast documents.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Provides public read access to weather data.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to learning article documents.
     * @path /learning_articles/{learningArticleId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Provides public read access to learning articles.
     */
    match /learning_articles/{learningArticleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to forum post documents.
     * @path /forumPosts/{postId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.authorId);
     * @allow delete: if isExistingOwner(resource.data.authorId);
     * @principle Allows any signed-in user to read forum posts, but only the author can update or delete.
     */
    match /forumPosts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows access to replies to comments within forum posts.
     * @path /forumPosts/{postId}/comments/{commentId}/replies/{replyId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
     * @allow update: if isExistingOwner(resource.data.authorId);
     * @allow delete: if isExistingOwner(resource.data.authorId);
     * @principle Allows any signed-in user to read replies, but only the author can update or delete.
     */
    match /forumPosts/{postId}/comments/{commentId}/replies/{replyId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows access to chat documents for participants.
     * @path /chats/{chatId}
     * @allow get, list: if isSignedIn() && request.auth.uid in resource.data.participants;
     * @allow create: if isSignedIn() && request.resource.data.participants.hasOnly([request.auth.uid]);
     * @allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
     * @allow delete: if false;
     * @principle Restricts access to chats to only the participants.
     */
    match /chats/{chatId} {
       allow get, list: if isSignedIn() && request.auth.uid in resource.data.participants;
       allow create: if isSignedIn() && request.resource.data.participants.hasOnly([request.auth.uid]);
       allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
       allow delete: if false;
    }

    /**
     * @description Allows access to chat message documents for chat participants.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow get, list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
     * @allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.senderId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Restricts access to chat messages to only the participants of the parent chat.
     */
    match /chats/{chatId}/messages/{messageId} {
       allow get, list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
       allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.senderId == request.auth.uid;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description This section addresses the reported error by restricting access to likes
     * @path /forumPosts/{postId}/likes/{userId}
     * @allow get: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if false;
     * @allow delete: if isOwner(userId);
     */
    match /forumPosts/{postId}/likes/{userId} {
        allow get: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if false;
        allow delete: if isOwner(userId);
    }
  }
}