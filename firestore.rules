/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for farmer data,
 * segregates data into different collections for simpler access control, and
 * provides public read access to weather forecasts and learning articles.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Farmer profiles, where farmerId is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Financial transactions for a farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Cultivation guides for a farmer.
 * - /farms/{farmId}: Farm data, with a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Weather forecast data (publicly readable).
 * - /learning_articles/{learningArticleId}: Learning articles (publicly readable).
 * - /roles_admin/{uid}: Admin roles, where the existence of a document grants admin status.
 * - /forumPosts/{postId}: Forum posts with likes and comments subcollections.
 *
 * Key Security Decisions:
 * - Strict user-ownership is enforced for farmer profiles, transactions, and cultivation guides.
 * - Public read access is granted for weather forecasts and learning articles.
 * - Admin roles are managed through a dedicated collection.
 * - Data validation is limited to ownership fields and relational integrity for prototyping.
 * - The update rule for forumPosts allows users to update the 'likes' field.
 *
 * Denormalization for Authorization:
 * - Farms include a 'farmerId' field to avoid needing to query farmer profiles for ownership checks.
 * - Forum posts include 'authorId' to verify ownership.
 *
 * Structural Segregation:
 * - Different data types (farmers, farms, weather forecasts, learning articles) are stored in separate collections
 * to simplify security rules and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to farmer profiles.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user_abc' can create their profile if farmerId == user_abc
     * @deny (create) User with UID 'user_abc' cannot create a profile with farmerId == user_xyz.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, or delete their profile if farmerId == user_abc.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete profile with farmerId == user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      // Read Permissions
      allow get: if isOwner(farmerId);
      allow list: if false; // No listing of user documents

      // Write Permissions
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to financial transactions for a specific farmer.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' can create a transaction under their profile (farmerId == user_abc).
     * @deny (create) User with UID 'user_abc' cannot create a transaction under another user's profile (farmerId == user_xyz).
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, or delete their transactions.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete transactions under farmerId == user_abc.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      // Read Permissions
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);

      // Write Permissions
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to cultivation guides for a specific farmer.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user_abc' can create a cultivation guide under their profile (farmerId == user_abc).
     * @deny (create) User with UID 'user_abc' cannot create a cultivation guide under another user's profile (farmerId == user_xyz).
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, update, or delete their cultivation guides.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot read, update, or delete cultivation guides under farmerId == user_abc.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      // Read Permissions
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);

      // Write Permissions
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to farm data.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user_abc' can create a farm if request.resource.data.farmerId == user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a farm if request.resource.data.farmerId == user_xyz.
     * @allow (get, list) All users can read farm data.
     * @allow (update, delete) User with UID 'user_abc' can update or delete farm data if resource.data.farmerId == user_abc.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete farm data if resource.data.farmerId == user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      // Read Permissions
      allow get: if true;
      allow list: if true;

      // Write Permissions
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.farmerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Controls access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) All users can read weather forecast data.
     * @deny (create, update, delete) No users can create, update, or delete weather forecast data via client.
     */
    match /weather_forecasts/{weatherForecastId} {
      // Read Permissions
      allow get: if true;
      allow list: if true;

      // Write Permissions
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) All users can read learning articles.
     * @deny (create, update, delete) No users can create, update, or delete learning articles via client.
     */
    match /learning_articles/{learningArticleId} {
      // Read Permissions
      allow get: if true;
      allow list: if true;

      // Write Permissions
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Controls access to admin roles.
     * @path /roles_admin/{uid}
     * @allow (get) Any signed-in user can check if they are an admin.
     * @allow (create) Only an admin (via backend functions) can assign admin roles.
     * @deny (create, update, delete) Prevents unauthorized modification of admin roles.
     */
     match /roles_admin/{uid} {
      // Read Permissions
      allow get: if isSignedIn();
      allow list: if false;

      // Write Permissions
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Controls access to forum posts.
     * @path /forumPosts/{postId}
     * @allow (get, list) All users can read forum posts.
     * @allow (create) User with UID 'user_abc' can create a forum post if request.resource.data.authorId == user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a forum post if request.resource.data.authorId == user_xyz.
     * @allow (update) User can update if they are the owner or only updating the 'likes' field.
     * @allow (delete) User with UID 'user_abc' can delete a forum post if resource.data.authorId == user_abc.
     * @deny (delete) User with UID 'user_xyz' cannot delete a forum post if resource.data.authorId == user_abc.
     * @principle Enforces document ownership for writes and allows likes updates.
     */
    match /forumPosts/{postId} {
      // Read Permissions
      allow get: if true;
      allow list: if true;

      // Write Permissions
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // --- CRUCIAL CHANGE HERE for the 'update' operation: ---
      allow update: if
        // Option 1: The user is the author and can update ANY field on their post
        isExistingOwner(resource.data.authorId) ||
        // Option 2: The user is signed in AND they are ONLY updating the 'likes' field
        (isSignedIn() && request.resource.data.diff(resource.data).changedKeys().hasOnly(['likes']));
      // --------------------------------------------------------

      allow delete: if isExistingOwner(resource.data.authorId);

      // Rules for the 'likes' subcollection
      match /likes/{likeId} {
        // Allows authenticated users to read existing likes (e.g., to check if they've liked it)
        allow read: if isSignedIn();
        // Allows a user to create their own 'like' document, using their UID as the document ID
        allow create: if isSignedIn() && request.auth.uid == likeId;
        // Allows a user to delete their own 'like' document (to 'unlike')
        allow delete: if isSignedIn() && request.auth.uid == likeId;
        // Do not allow updating a 'like' document directly
        allow update: if false; // Likes are either created or deleted, not updated.
      }

      // Rules for the 'comments' subcollection (already correct based on previous discussion)
      match /comments/{commentId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
        allow delete: if isExistingOwner(resource.data.authorId);
      }
    }

    //------------------ Helper functions -----------------------
    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource, based on resource data.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && resource != null && request.auth.uid == userId;
    }
  }
}