/**
 * @description This ruleset enforces a strict user-ownership model for farmer data and their associated resources (transactions, cultivation guides).
 * It provides public read access to learning articles and weather forecasts.
 * Admin roles are managed via a separate collection.
 * @dataStructure
 * - /farmers/{farmerId}: Farmer profiles, where farmerId is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Financial transactions owned by a farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Cultivation guides owned by a farmer.
 * - /farms/{farmId}: Farm data, with a farmerId field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Public weather forecast data.
 * - /learning_articles/{learningArticleId}: Public learning articles.
 * - /roles_admin/{uid}: Documents indicating admin status (existence implies admin).
 * - /forumPosts/{postId}: Community forum posts.
 * @keySecurityDecisions
 * - User data is strictly segregated under /farmers/{farmerId}, ensuring that users can only access their own data.
 * - Listing all users is disallowed.
 * - Weather forecasts and learning articles are publicly readable.
 * - Admin status is determined by the existence of a document in /roles_admin/{uid}.
 * - Forum posts are publicly readable, but write access is restricted to authenticated users.
 * @denormalizationForAuthorization
 * - Farm documents include a `farmerId` field to simplify ownership checks.
 * @structuralSegregation
 * - Public data (weather forecasts, learning articles) is stored in separate top-level collections, distinct from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own farmer profile.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user1' can create their profile at /farmers/user1 if request.auth.uid == 'user1'.
     * @allow (get, update, delete) User with UID 'user1' can read, update, and delete their profile at /farmers/user1 if request.auth.uid == 'user1'.
     * @deny (create) User with UID 'user2' cannot create a profile at /farmers/user1.
     * @deny (get, update, delete) User with UID 'user2' cannot read, update, or delete the profile at /farmers/user1.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      function isOwner(farmerId) {
        return request.auth != null && request.auth.uid == farmerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Allows a user to read and write their own transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user1' can create a transaction under /farmers/user1/transactions/tx1 if request.auth.uid == 'user1'.
     * @allow (get, update, delete) User with UID 'user1' can read, update, and delete a transaction under /farmers/user1/transactions/tx1 if request.auth.uid == 'user1'.
     * @deny (create) User with UID 'user2' cannot create a transaction under /farmers/user1/transactions/tx1.
     * @deny (get, update, delete) User with UID 'user2' cannot read, update, or delete a transaction under /farmers/user1/transactions/tx1.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isOwner(farmerId) {
        return request.auth != null && request.auth.uid == farmerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

     /**
      * @description Allows a farmer to manage their own cultivation guides.
      * @path /farmers/{farmerId}/cultivationGuides/{guideId}
      * @allow (create) User 'farmer1' can create a cultivation guide under /farmers/farmer1/cultivationGuides if request.auth.uid == 'farmer1'.
      * @allow (get, list, update, delete) User 'farmer1' can access their own cultivation guides.
      * @deny (create) User 'farmer2' cannot create a cultivation guide under /farmers/farmer1/cultivationGuides.
      * @deny (get, list, update, delete) User 'farmer2' cannot access cultivation guides under /farmers/farmer1/cultivationGuides.
      * @principle Enforces user-specific data isolation based on path-based ownership.
      */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isOwner(farmerId) {
        return request.auth != null && request.auth.uid == farmerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Allows anyone to read farm data, but only the owner can modify it.
     * @path /farms/{farmId}
     * @allow (get, list) Any user can read farm data.
     * @allow (create) User 'farmer1' can create a farm if request.auth.uid == request.resource.data.farmerId.
     * @allow (update, delete) User 'farmer1' can update/delete farm 'farm1' if resource.data.farmerId == request.auth.uid.
     * @deny (create) User 'farmer2' cannot create a farm if request.auth.uid != request.resource.data.farmerId.
     * @deny (update, delete) User 'farmer2' cannot update/delete farm 'farm1' if resource.data.farmerId != request.auth.uid.
     * @principle Public read access with owner-only writes.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.farmerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.farmerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Allows anyone to read weather forecast data. Write access is not granted directly (presumably handled by a trusted environment).
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Any user can read weather forecast data.
     * @deny (create, update, delete) No direct client-side writes allowed.
     * @principle Public read access with no client-side writes.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Allows anyone to read learning articles. Write access is not granted directly (presumably handled by a trusted environment).
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Any user can read learning articles.
     * @deny (create, update, delete) No direct client-side writes allowed.
     * @principle Public read access with no client-side writes.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Allows reading of admin role document if the UID matches.  Existence of document signifies admin status.  Write access is not granted directly (presumably handled by a trusted environment).
     * @path /roles_admin/{uid}
     * @allow (get) Allow a user to get their admin role document.
     * @deny (list, create, update, delete) No client-side listing, creation, updates, or deletion of admin roles.
     * @principle Restricts admin role management to a trusted environment.
     */
    match /roles_admin/{uid} {
        function isOwner(uid) {
            return request.auth != null && request.auth.uid == uid;
        }

      allow get: if isOwner(uid);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
   /**
    * @description Allows anyone to read forum posts.  Write access is restricted to authenticated users.
    * @path /forumPosts/{postId}
    * @allow (get, list) Any user can read forum posts.
    * @allow (create) Any authenticated user can create a forum post.  Validates that the authorId matches their UID.
    * @allow (update, delete) Only the author can update/delete their own post.
    */
    match /forumPosts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == resource.data.authorId;
      allow delete: if isSignedIn() && request.resource.data.authorId == resource.data.authorId;

       /**
        * @description Allows anyone to read likes for a forum post.  Write access is restricted to authenticated users.
        * @path /forumPosts/{postId}/likes/{likeId}
        * @allow (get, list) Any user can read likes for a forum post.
        * @allow (create) Any authenticated user can create a like for a forum post.  
        * @allow (update, delete) Only the owner can update/delete their own like.
        */
        match /likes/{likeId} {
          allow get: if true;
          allow list: if false;
          allow create: if request.auth != null;
          allow update: if false;
          allow delete: if request.auth.uid == resource.data.userId;
        }
    }
  }
}