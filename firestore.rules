/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 *               allows public read access to weather forecasts and learning articles,
 *               and restricts farm data access to authenticated users.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Stores farmer profiles, with farmerId matching the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Stores transactions for a specific farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides for a specific farmer.
 * - /farms/{farmId}: Stores farm data, with a farmerId field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Stores weather forecast data (publicly readable).
 * - /learning_articles/{learningArticleId}: Stores learning articles (publicly readable).
 * - /roles_admin/{uid}: Stores admin roles, with document existence indicating admin status.
 * - /forumPosts/{postId}: Stores forum posts.
 * - /forumPosts/{postId}/likes/{userId}: Stores likes for a specific post by a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed for the /farmers collection.
 * - Weather forecasts and learning articles are publicly readable.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Admin roles are managed through the /roles_admin collection.
 *
 * Denormalization for Authorization:
 * - Farm documents include a `farmerId` field to simplify ownership checks.
 *
 * Structural Segregation:
 * - Private farmer data is stored under /farmers/{farmerId}, while public data (weather, articles)
 *   is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Controls access to farmer profiles.  Farmers can only read/write their own profile.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user1' can create a profile with farmerId = 'user1'.
     * @deny (create) User with UID 'user1' cannot create a profile with farmerId = 'user2'.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false; // No listing farmers.
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to farmer transactions. Only the owner can read/write.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user1' can create a transaction under /farmers/user1.
     * @deny (create) User with UID 'user1' cannot create a transaction under /farmers/user2.
     * @principle Enforces document ownership for writes and reads.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to farmer cultivation guides. Only the owner can read/write.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user1' can create a cultivation guide under /farmers/user1.
     * @deny (create) User with UID 'user1' cannot create a cultivation guide under /farmers/user2.
     * @principle Enforces document ownership for writes and reads.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Controls access to farm data. Authenticated users can create, update, and delete their own farms.  Others can read.
     * @path /farms/{farmId}
     * @allow (get) Any authenticated user can read farm data.
     * @allow (create) User with UID 'user1' can create a farm with farmerId = 'user1'.
     * @deny (create) User with UID 'user1' cannot create a farm with farmerId = 'user2'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.farmerId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.farmerId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to weather forecast data. Publicly readable.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Any user can read weather forecast data.
     * @principle Allows public reads.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation if needed
      allow update: if false; // TODO: Add validation if needed
      allow delete: if false; // TODO: Add validation if needed
    }

    /**
     * @description Controls access to learning articles. Publicly readable.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Any user can read learning articles.
     * @principle Allows public reads.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add validation if needed
      allow update: if false; // TODO: Add validation if needed
      allow delete: if false; // TODO: Add validation if needed
    }
    
    /**
     * @description Controls access to admin roles. Only accessible by backend functions.
     * @path /roles_admin/{uid}
     * @allow (get) Admin check.
     * @principle Restricts read/write access to admin roles collection.
     */
    match /roles_admin/{uid} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Controls access to forum posts.
     * @path /forumPosts/{postId}
     * @allow (get) Any user can read a forum post.
     * @allow (create) Any authenticated user can create a forum post. The authorId must match the authenticated user.
     * @allow (update) Only the author can update the forum post.
     * @allow (delete) Only the author can delete the forum post.
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /forumPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);

          /**
           * @description Controls access to likes for a specific forum post.  A user can only like/unlike a post once.
           * @path /forumPosts/{postId}/likes/{userId}
           * @allow (create) User can create a "like" document if the userId matches their auth.uid.
           * @allow (delete) User can delete a "like" document if the userId matches their auth.uid.
           * @deny (create) User cannot create a "like" document if the userId does not match their auth.uid.
           * @deny (delete) User cannot delete a "like" document if the userId does not match their auth.uid.
           * @principle Enforces user-specific likes, preventing multiple likes from the same user.
           */
          match /likes/{userId} {
            allow get: if false;
            allow list: if false;
            allow create: if isSignedIn() && userId == request.auth.uid && request.resource.data.userId == request.auth.uid;
            allow update: if false;
            allow delete: if isSignedIn() && userId == request.auth.uid;
          }
    }
  }
}