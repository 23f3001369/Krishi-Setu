rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to farmer profile data.
     * @path /farmers/{farmerId}
     * @allow (create) If the user is creating their own profile (UID matches farmerId).
     * @allow (get, update, delete) If the user is the owner of the profile.
     * @deny (create) If the user attempts to create a profile with a mismatched UID.
     * @deny (update, delete) If the user is not the owner of the profile.
     * @principle Enforces document ownership for farmer profiles.
     */
    match /farmers/{farmerId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(farmerId) {
        return isSignedIn() && request.auth.uid == farmerId;
      }
      function isExistingOwner(farmerId) {
        return isSignedIn() && request.auth.uid == resource.data.uid && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if false; // User listing is typically disabled for privacy.
      allow create: if isSignedIn() && request.auth.uid == farmerId;
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to transaction data for a specific farmer.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create, get, update, delete) If the user is the owner of the farmer profile.
     * @deny (create, get, update, delete) If the user is not the owner of the farmer profile.
     * @principle Enforces document ownership for farmer transactions.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(farmerId) {
        return isSignedIn() && request.auth.uid == farmerId;
      }
      function isExistingOwner(farmerId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/farmers/$(farmerId)).data.uid && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to cultivation guide data for a specific farmer.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create, get, update, delete) If the user is the owner of the farmer profile.
     * @deny (create, get, update, delete) If the user is not the owner of the farmer profile.
     * @principle Enforces document ownership for cultivation guides.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(farmerId) {
        return isSignedIn() && request.auth.uid == farmerId;
      }
      function isExistingOwner(farmerId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/farmers/$(farmerId)).data.uid && resource != null;
      }

      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Allows access to farm data.
     * @path /farms/{farmId}
     * @allow (get, list) If true (potentially public or restricted via query).
     * @allow (create) If the farmerId matches the user's UID.
     * @allow (update, delete) If the farmerId matches the user's UID and the document exists.
     * @deny (create, update, delete) If the farmerId does not match the user's UID.
     * @principle Enforces document ownership for farm data.
     */
    match /farms/{farmId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(farmerId) {
        return isSignedIn() && request.auth.uid == farmerId;
      }
      function isExistingOwner(farmerId) {
        return isSignedIn() && request.auth.uid == resource.data.farmerId && resource != null;
      }

      allow get: if true; // Public read
      allow list: if true; // Public list, but should be filtered via query
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isExistingOwner(farmId);
      allow delete: if isExistingOwner(farmId);
    }

    /**
     * @description Allows public read access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) If true (publicly readable).
     * @deny (create, update, delete) Always deny writes (admin only).
     * @principle Allows public access to weather forecast data.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) If true (publicly readable).
     * @deny (create, update, delete) Always deny writes (admin only).
     * @principle Allows public access to learning articles.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
        /**
         * @description Allows read access to admin role for a specific user.
         * @path /roles_admin/{uid}
         * @allow (get) If the user is authenticated.
         * @deny (list) Always deny listing.
         * @allow (create) Only allow creating an admin role document, if it's performed by backend.
         * @allow (update) Only allow updating an admin role document, if it's performed by backend.
         * @allow (delete) Only allow deleting an admin role document, if it's performed by backend.
         * @principle Enforces document ownership for admin role.
         */
        match /roles_admin/{uid} {
            function isSignedIn() {
                return request.auth != null;
            }

            allow get: if isSignedIn();
            allow list: if false;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }

        /**
         * @description Allows access to forum posts.
         * @path /forumPosts/{postId}
         * @allow (get, list) If true (publicly readable).
         * @allow (create) If the user is authenticated.
         * @allow (update, delete) If the user is the author of the post.
         * @deny (create, update, delete) If the user is not the author of the post.
         * @principle Enforces document ownership for forum posts.
         */
        match /forumPosts/{postId} {
          function isSignedIn() {
            return request.auth != null;
          }
          function isOwner(authorId) {
            return isSignedIn() && request.auth.uid == authorId;
          }
          function isExistingOwner(authorId) {
            return isSignedIn() && request.auth.uid == resource.data.authorId && resource != null;
          }

          allow get: if true; // Public read
          allow list: if true; // Public list
          allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
          allow update: if isExistingOwner(postId);
          allow delete: if isExistingOwner(postId);

          match /likes/{likeId} {
            allow get: if true;
            allow list: if true;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
          }
        }
  }
}