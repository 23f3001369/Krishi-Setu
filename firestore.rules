rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a farmer to manage their profile data.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user1' can create their profile if farmerId matches.
     * @deny (create) User with UID 'user2' cannot create a profile with farmerId 'user1'.
     * @allow (get, update, delete) User with UID 'user1' can read/write their profile if farmerId matches.
     * @deny (get, update, delete) User with UID 'user2' cannot read/write user1's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if request.auth != null && request.auth.uid == farmerId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == farmerId;
      allow update: if request.auth != null && request.auth.uid == farmerId;
      allow delete: if request.auth != null && request.auth.uid == farmerId;
    }

    /**
     * @description Allows a farmer to manage their financial transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user1' can create a transaction under their profile (farmerId = user1).
     * @deny (create) User with UID 'user2' cannot create a transaction under user1's profile.
     * @allow (get, update, delete) User with UID 'user1' can read/write their transactions (farmerId = user1).
     * @deny (get, update, delete) User with UID 'user2' cannot read/write user1's transactions.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if request.auth != null && request.auth.uid == farmerId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == farmerId;
      allow update: if request.auth != null && request.auth.uid == farmerId;
      allow delete: if request.auth != null && request.auth.uid == farmerId;
    }

    /**
     * @description Allows a farmer to manage their AI-generated cultivation guides.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user1' can create a guide under their profile (farmerId = user1).
     * @deny (create) User with UID 'user2' cannot create a guide under user1's profile.
     * @allow (get, update, delete) User with UID 'user1' can read/write their guides (farmerId = user1).
     * @deny (get, update, delete) User with UID 'user2' cannot read/write user1's guides.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if request.auth != null && request.auth.uid == farmerId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == farmerId;
      allow update: if request.auth != null && request.auth.uid == farmerId;
      allow delete: if request.auth != null && request.auth.uid == farmerId;
    }

    /**
     * @description Allows authorized users to manage farm data, enforcing ownership via the 'farmerId' field.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user1' can create a farm with farmerId 'user1'.
     * @deny (create) User with UID 'user2' cannot create a farm with farmerId 'user1'.
     * @allow (get, list, update, delete) User with UID 'user1' can read/write farms where farmerId is 'user1'.
     * @deny (get, list, update, delete) User with UID 'user2' cannot read/write farms where farmerId is 'user1'.
     * @principle Enforces document ownership via the 'farmerId' field.
     */
    match /farms/{farmId} {
      allow get: if request.auth != null && request.auth.uid == resource.data.farmerId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.farmerId;
      allow update: if request.auth != null && request.auth.uid == resource.data.farmerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.farmerId;
    }

    /**
     * @description Allows public read access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Any user can read weather forecast data.
     * @deny (create, update, delete) No user can create, update, or delete weather forecast data through client-side rules.
     * @principle Provides public read access while restricting write access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Any user can read learning articles.
     * @deny (create, update, delete) No user can create, update, or delete learning articles through client-side rules.
     * @principle Provides public read access while restricting write access.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants admin privileges to users with a document in this collection.
     * @path /roles_admin/{uid}
     * @allow (get) Any signed-in user can check if they have admin privileges.
     * @deny (create, update, delete) Only backend functions should create/modify admin roles.
     * @principle Checks for document existence to grant admin privileges.
     */
    match /roles_admin/{uid} {
       function isAdmin() {
         return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
       }
      allow get: if request.auth != null && request.auth.uid == uid;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to community forum posts, with create restricted to authenticated users.
     * @path /forumPosts/{postId}
     * @allow (get, list) Any user can read forum posts.
     * @allow (create) Any authenticated user can create a forum post.
     * @deny (update, delete) Only the author can update or delete forum posts.
     * @principle Authenticated users can create posts; ownership required for edits.
     */
    match /forumPosts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == resource.data.authorId;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      /**
       * @description Allows users to read likes within a forum post.
       * @path /forumPosts/{postId}/likes/{likeId}
       * @allow (list) Any user can list likes for a post.
       * @deny (get, create, update, delete) Access to individual likes is denied.
       */
      match /likes/{likeId} {
        allow get: if false;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}