rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the existing owner of the document.
      */
    function isExistingOwner(farmerId) {
      return resource.data.keys().hasAll(['id']) && isOwner(farmerId);
    }

    /**
     * @description Allows only signed-in users to read admin roles.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Defines the farmer entity.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user123' can create a farmer document if farmerId == 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete their own farmer document at /farmers/user123.
     * @deny (create) User with UID 'user456' cannot create a farmer document at /farmers/user123.
     * @deny (get, update, delete) User with UID 'user456' cannot get, update, or delete the farmer document at /farmers/user123.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines the transaction subcollection for a farmer.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction under /farmers/user123/transactions.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete their own transaction at /farmers/user123/transactions/trans123.
     * @deny (create) User with UID 'user456' cannot create a transaction under /farmers/user123/transactions.
     * @deny (get, update, delete) User with UID 'user456' cannot get, update, or delete a transaction at /farmers/user123/transactions/trans123.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines the cultivation guides subcollection for a farmer.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user123' can create a cultivation guide under /farmers/user123/cultivationGuides.
     * @allow (get, update, delete) User with UID 'user123' can get, update, or delete their own guide at /farmers/user123/cultivationGuides/guide123.
     * @deny (create) User with UID 'user456' cannot create a cultivation guide under /farmers/user123/cultivationGuides.
     * @deny (get, update, delete) User with UID 'user456' cannot get, update, or delete a guide at /farmers/user123/cultivationGuides/guide123.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isOwner(farmerId);
      allow delete: if isSignedIn() && isOwner(farmerId);
    }

    /**
     * @description Defines the farm entity.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user123' can create a farm if request.resource.data.farmerId == 'user123'.
     * @allow (get, list) Any user can read farm data.
     * @allow (update, delete) Only the owner (farmerId) can update or delete the farm.
     * @deny (create) User with UID 'user456' cannot create a farm with farmerId == 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update or delete the farm owned by user123.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Defines the weather forecast entity.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Any user can read weather forecast data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read access, no client-side writes.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the learning articles entity.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Any user can read learning articles.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read access, no client-side writes.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the admin roles entity.
     * @path /roles_admin/{uid}
     * @allow (get) Any signed-in user can get the admin role, likely for checking their own status.
     * @deny (list)  Listing roles is not allowed
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Restricts write access to admin roles.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Defines the forum posts entity.
     * @path /forumPosts/{postId}
     * @allow (get, list) Any user can read forum posts.
     * @allow (create) Only signed-in users can create forum posts. The authorId must match the user's UID.
     * @allow (update, delete) Only the owner (authorId) can update or delete the post.
     * @deny (create) Anonymous users cannot create forum posts.
     * @deny (update, delete) Non-owners cannot update or delete forum posts.
     * @principle Public read access, owner-only writes for authenticated users.
     */
    match /forumPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == resource.data.authorId;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }
  }
}