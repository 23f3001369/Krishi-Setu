/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 *              while allowing public read access to community content and learning resources.
 *              Global admin roles are supported via a separate collection.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Farmer profiles, owned by the user with matching UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Financial transactions, owned by the farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Cultivation guides, owned by the farmer.
 * - /farms/{farmId}: Farm data, owned by the farmer (farmerId field).
 * - /weather_forecasts/{weatherForecastId}: Public weather forecast data.
 * - /learning_articles/{learningArticleId}: Public learning articles.
 * - /forumPosts/{postId}: Community forum posts, with public read access.
 * - /forumPosts/{postId}/likes: Likes subcollection for forum posts.
 * - /roles_admin/{uid}: Collection to store admin roles; presence of a document grants admin status.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to weather forecasts, learning articles, and forum posts.
 * - Strict ownership is enforced for farmer-related data (profiles, transactions, farms, cultivation guides).
 * - A global admin role is supported via the /roles_admin/{uid} collection.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces ownership for farmer profiles. Only the authenticated user
     *              with a matching UID can read, write, update, or delete their own profile.
     * @path /farmers/{farmerId}
     * @allow (create) - User with UID 'user1' can create a profile at /farmers/user1.
     * @allow (get, update, delete) - User with UID 'user1' can read, update, delete their profile at /farmers/user1.
     * @deny (create) - User with UID 'user2' cannot create a profile at /farmers/user1.
     * @deny (get, update, delete) - User with UID 'user2' cannot read, update, or delete the profile at /farmers/user1.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isSignedIn() && isOwner(farmerId);
      allow list: if false; // User listing is not permitted
      allow create: if isSignedIn() && isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isSignedIn() && isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(farmerId);
    }

    /**
     * @description Enforces ownership for farmer transactions. Only the farmer can
     *              create, read, update, or delete their own transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create, get, update, delete) - User with UID 'user1' can manage transactions under /farmers/user1/transactions/{transactionId}.
     * @deny (create, get, update, delete) - User with UID 'user2' cannot manage transactions under /farmers/user1/transactions/{transactionId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(farmerId);
      allow list: if isSignedIn() && isOwner(farmerId);
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isExistingOwner(farmerId);
      allow delete: if isSignedIn() && isExistingOwner(farmerId);
    }

    /**
     * @description Enforces ownership for farmer cultivation guides. Only the farmer can
     *              create, read, update, or delete their own cultivation guides.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create, get, update, delete) - User with UID 'user1' can manage cultivation guides under /farmers/user1/cultivationGuides/{guideId}.
     * @deny (create, get, update, delete) - User with UID 'user2' cannot manage cultivation guides under /farmers/user1/cultivationGuides/{guideId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isSignedIn() && isOwner(farmerId);
      allow list: if isSignedIn() && isOwner(farmerId);
      allow create: if isSignedIn() && isOwner(farmerId);
      allow update: if isSignedIn() && isExistingOwner(farmerId);
      allow delete: if isSignedIn() && isExistingOwner(farmerId);
    }

    /**
     * @description Enforces ownership for farms.  Any authenticated user can read a farm's data,
     *              but only the owner (farmerId) can create, update, or delete it.
     * @path /farms/{farmId}
     * @allow (get, list) - Any logged in user can read farm data.
     * @allow (create) - User with UID 'user1' can create a farm with farmerId 'user1'.
     * @allow (update, delete) - User with UID 'user1' can update/delete a farm where resource.data.farmerId == 'user1'.
     * @deny (create) - User with UID 'user2' cannot create a farm with farmerId 'user1'.
     * @deny (update, delete) - User with UID 'user2' cannot update/delete a farm where resource.data.farmerId == 'user1'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /farms/{farmId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.farmerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Allows public read access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) - Any user (even unauthenticated) can read weather forecast data.
     * @deny (create, update, delete) - No user can create, update, or delete weather forecast data through client-side rules.
     * @principle Allows public reads, restricts writes.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) - Any user (even unauthenticated) can read learning articles.
     * @deny (create, update, delete) - No user can create, update, or delete learning articles through client-side rules.
     * @principle Allows public reads, restricts writes.
     */
    match /learning_articles/{learningArticleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
    /**
     * @description Grants admin access to the roles_admin collection. Only a user whose UID
     *              matches the document ID can create, read, update, or delete their own role.
     *              This effectively allows checking for admin status.
     * @path /roles_admin/{uid}
     * @allow (create, get, update, delete) - User with UID 'admin1' can manage their admin role document at /roles_admin/admin1.
     * @deny (create, get, update, delete) - User with UID 'user1' cannot manage admin roles at /roles_admin/admin1.
     * @principle Restricts access to a user's own data tree.
     */
    match /roles_admin/{uid} {
      allow get: if isSignedIn() && isOwner(uid);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(uid);
      allow update: if isSignedIn() && isExistingOwner(uid);
      allow delete: if isSignedIn() && isExistingOwner(uid);
    }

    /**
     * @description Allows public read access to forum posts.
     *              Writes should only be done by authenticated users, and the authorId
     *              must match the authenticated user's UID.
     * @path /forumPosts/{postId}
     * @allow (get, list) - Any user (even unauthenticated) can read forum posts.
     * @allow (create) - User with UID 'user1' can create a forum post with authorId 'user1'.
     * @allow (update, delete) - User with UID 'user1' can update/delete a forum post where resource.data.authorId == 'user1'.
     * @deny (create) - User with UID 'user2' cannot create a forum post with authorId 'user1'.
     * @deny (update, delete) - User with UID 'user2' cannot update/delete a forum post where resource.data.authorId == 'user1'.
     * @principle Allows public reads, restricts writes to owners.
     */
    match /forumPosts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.authorId == request.auth.uid;
    }

      /**
       * @description Secure the likes subcollection for forum posts.
       *              Any authenticated user can read the likes, but only authenticated users can create them.
       *              Updates and deletes are forbidden to client-side code.
       * @path /forumPosts/{postId}/likes/{likeId}
       * @allow get, list: if isSignedIn();
       * @allow create: if isSignedIn();
       * @deny update, delete: if true; // No client-side updates or deletes of likes.
       * @principle Authentication required for reads and writes; no updates or deletes allowed.
       */
    match /forumPosts/{postId}/likes/{likeId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn();
          allow update, delete: if false;
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user is the owner of the resource.
   * @param userId The user ID to compare against the authenticated user's UID.
   * @return True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param userId The user ID to compare against the authenticated user's UID.
     * @return True if the user is the owner, false otherwise.
     */
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}