/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data,
 * and public read access for weather forecasts and learning articles.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Stores farmer profiles, where farmerId is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Stores financial transactions for a specific farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides for a specific farmer.
 * - /farms/{farmId}: Stores farm data, with a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Stores weather forecast data (public read).
 * - /learning_articles/{learningArticleId}: Stores learning articles (public read).
 * - /roles_admin/{uid}: Documents in this collection denote admin status.
 * - /forumPosts/{postId}: Stores forum posts.
 * - /forumPosts/{postId}/likes/{userId}: Stores likes for a specific post.
 *
 * Key Security Decisions:
 * - Farmers can only access their own profile data and associated subcollections (transactions, cultivationGuides).
 * - Weather forecasts and learning articles are publicly readable.
 * - Listing of weather forecasts and learning articles is allowed for all users.
 * - Forum posts and their likes are readable by all, but creation/deletion of likes is restricted to the liking user.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 * - The `farms` collection denormalizes the `farmerId` to allow efficient querying of farms owned by a user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secure farmer profiles. Only the authenticated farmer can read/write their own profile.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user1' can create their profile at /farmers/user1.
     * @allow (get) User with UID 'user1' can read their profile at /farmers/user1.
     * @deny (create) User with UID 'user1' cannot create a profile at /farmers/user2.
     * @deny (update) User with UID 'user1' cannot update profile /farmers/user2.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Secure financial transactions for a specific farmer. Only the owner can read/write.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user1' can create a transaction under /farmers/user1/transactions/tx1.
     * @allow (get) User with UID 'user1' can read a transaction under /farmers/user1/transactions/tx1.
     * @deny (create) User with UID 'user1' cannot create a transaction under /farmers/user2/transactions/tx1.
     * @deny (update) User with UID 'user1' cannot update transaction /farmers/user2/transactions/tx1.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Secure cultivation guides for a specific farmer. Only the owner can read/write.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user1' can create a guide under /farmers/user1/cultivationGuides/guide1.
     * @allow (get) User with UID 'user1' can read a guide under /farmers/user1/cultivationGuides/guide1.
     * @deny (create) User with UID 'user1' cannot create a guide under /farmers/user2/cultivationGuides/guide1.
     * @deny (update) User with UID 'user1' cannot update guide /farmers/user2/cultivationGuides/guide1.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId) && request.resource.data.userId == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Secure farm data. Includes 'farmerId' to indicate ownership.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user1' can create a farm with farmerId 'user1'.
     * @allow (get) Any user can read a farm.
     * @deny (create) User with UID 'user1' cannot create a farm with farmerId 'user2'.
     * @deny (update) User with UID 'user1' cannot update a farm if not the owner.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.farmerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Weather forecast data is publicly readable.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Any user can read weather forecasts.
     * @principle Public read access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Learning articles are publicly readable.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Any user can read learning articles.
     * @principle Public read access.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure admin roles. Existence of the document grants admin status.
     * @path /roles_admin/{uid}
     */
    match /roles_admin/{uid} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

     /**
      * @description Stores all posts for the community forum.
      * @path /forumPosts/{postId}
      * @allow (get) Any user can read forum posts.
      * @principle Public read access.
      */
     match /forumPosts/{postId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     }

    /**
     * @description Stores likes for a specific post. Only the user who liked the post can create or delete their like.
     * @path /forumPosts/{postId}/likes/{userId}
     * @allow (create) User with UID 'user1' can create a like under /forumPosts/post1/likes/user1.
     * @allow (get) Any user can read likes.
     * @deny (create) User with UID 'user1' cannot create a like under /forumPosts/post1/likes/user2.
     */
    match /forumPosts/{postId}/likes/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if isOwner(userId);
    }
  }
}