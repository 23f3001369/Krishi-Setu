/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data and a public-read, owner-write model for other top-level collections.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Stores farmer profiles, where farmerId is the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Stores financial transactions for a specific farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides for a specific farmer.
 * - /farms/{farmId}: Stores farm data with a farmerId field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Stores weather forecast data (public read).
 * - /learning_articles/{learningArticleId}: Stores learning articles (public read).
 * - /roles_admin/{uid}: Determines admin status; document existence grants admin role.
 * - /forumPosts/{postId}: Stores forum posts with authorId indicating ownership.
 * - /forumPosts/{postId}/comments/{commentId}/replies/{replyId}: Stores replies to comments in forum posts.
 *
 * Key Security Decisions:
 * - User data is strictly owned by the authenticated user.
 * - Listing of user profiles is disallowed for privacy.
 * - Weather forecasts and learning articles are publicly readable but only writable through backend functions or by admins (out of scope for these rules).
 * - Admin status is determined by the existence of a document in the /roles_admin/{uid} collection.
 * - All write operations are explicitly authorized to prevent accidental open access.
 *
 * Denormalization for Authorization:
 * - The /farms/{farmId} collection denormalizes the farmerId field, enabling efficient queries and security rules based on ownership.
 *
 * Structural Segregation:
 * - Different data types are stored in separate collections, simplifying security rules and access control policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the authenticated user is the owner of the resource (farmerId matches request auth UID).
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the authenticated user is the existing owner of the resource, ensuring the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the /roles_admin/{uid} collection.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for farmer profiles.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user123' can create their profile if farmerId matches.
     * @deny (create) User with UID 'user123' cannot create a profile with farmerId 'user456'.
     * @principle Enforces document ownership for writes and restricts listing of user profiles.
     */
    match /farmers/{farmerId} {
      // Only allow creating a farmer profile if the authenticated user's UID matches the farmerId.
      allow create: if isSignedIn() && isOwner(farmerId) && request.resource.data.id == farmerId;
      // Only allow reading a farmer profile if the authenticated user's UID matches the farmerId.
      allow get: if isOwner(farmerId);
      // Prevent listing of farmer profiles for privacy reasons.
      allow list: if false;
      // Only allow updating a farmer profile if the authenticated user's UID matches the farmerId.
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      // Only allow deleting a farmer profile if the authenticated user's UID matches the farmerId and the document exists.
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farmer transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction under their profile.
     * @deny (create) User with UID 'user123' cannot create a transaction under another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      // Only allow creating a transaction if the authenticated user's UID matches the farmerId.
      allow create: if isSignedIn() && isOwner(farmerId);
      // Only allow reading a transaction if the authenticated user's UID matches the farmerId.
      allow get: if isOwner(farmerId);
      // Only allow listing transactions if the authenticated user's UID matches the farmerId.
      allow list: if isOwner(farmerId);
      // Only allow updating a transaction if the authenticated user's UID matches the farmerId and the document exists.
      allow update: if isExistingOwner(farmerId);
      // Only allow deleting a transaction if the authenticated user's UID matches the farmerId and the document exists.
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farmer cultivation guides.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user123' can create a cultivation guide under their profile.
     * @deny (create) User with UID 'user123' cannot create a cultivation guide under another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      // Only allow creating a cultivation guide if the authenticated user's UID matches the farmerId.
      allow create: if isSignedIn() && isOwner(farmerId) && request.resource.data.userId == farmerId;
      // Only allow reading a cultivation guide if the authenticated user's UID matches the farmerId.
      allow get: if isOwner(farmerId);
      // Only allow listing cultivation guides if the authenticated user's UID matches the farmerId.
      allow list: if isOwner(farmerId);
      // Only allow updating a cultivation guide if the authenticated user's UID matches the farmerId and the document exists.
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      // Only allow deleting a cultivation guide if the authenticated user's UID matches the farmerId and the document exists.
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for farm data.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user123' can create a farm if farmerId in the document matches.
     * @deny (create) User with UID 'user123' cannot create a farm if farmerId does not match.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      // Allow anyone to read farm data.
      allow get, list: if true;
      // Only allow creating a farm if the authenticated user's UID matches the farmerId in the document.
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      // Only allow updating a farm if the authenticated user's UID matches the farmerId in the existing document and the document exists.
      allow update: if isSignedIn() && isExistingOwner(resource.data.farmerId);
      // Only allow deleting a farm if the authenticated user's UID matches the farmerId in the existing document and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Rules for weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Anyone can read weather forecast data.
     * @deny (create, update, delete) Only admins or backend functions can write weather data.
     * @principle Public read, restricted write.
     */
    match /weather_forecasts/{weatherForecastId} {
      // Allow anyone to read weather forecast data.
      allow get, list: if true;
      // Only allow create, update, and delete if the user is an admin.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Anyone can read learning articles.
     * @deny (create, update, delete) Only admins or backend functions can write learning articles.
     * @principle Public read, restricted write.
     */
    match /learning_articles/{learningArticleId} {
      // Allow anyone to read learning articles.
      allow get, list: if true;
      // Only allow create, update, and delete if the user is an admin.
      allow create, update, delete: if isAdmin();
    }
    
        /**
     * @description Rules for admin roles.
     * @path /roles_admin/{uid}
     * @allow (create) Anyone can create their admin role document.
     * @deny (create) User with UID 'user123' cannot create an admin role document for another user.
     */
    match /roles_admin/{uid} {
        // Only allow creating an admin role if the authenticated user's UID matches the document ID.
        allow create: if isSignedIn() && isOwner(uid);
        // Only allow reading an admin role if the authenticated user's UID matches the document ID.
        allow get: if isSignedIn() && isOwner(uid);
        // Listing of admin roles is disallowed.
        allow list: if false;
        // Only allow updating an admin role if the authenticated user's UID matches the document ID and the document exists.
        allow update: if isExistingOwner(uid);
        // Only allow deleting an admin role if the authenticated user's UID matches the document ID and the document exists.
        allow delete: if isExistingOwner(uid);
    }

        /**
     * @description Rules for forum posts.
     * @path /forumPosts/{postId}
     * @allow (create) User with UID 'user123' can create a forum post.
     * @deny (create) User with UID 'user123' cannot create a forum post with mismatched authorId.
     */
    match /forumPosts/{postId} {
      // Allow anyone to read forum posts.
      allow get, list: if true;

      // Only allow creating a post if the authenticated user is signed in and the authorId matches the authenticated user's UID.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only allow updating a post if the authenticated user is the author of the post and the document exists.
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);

      // Only allow deleting a post if the authenticated user is the author of the post and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for replies to comments.
     * @path /forumPosts/{postId}/comments/{commentId}/replies/{replyId}
     * @allow (create) User with UID 'user123' can create a reply to a comment.
     * @deny (delete) User with UID 'user123' cannot delete another user's reply.
     */
    match /forumPosts/{postId}/comments/{commentId}/replies/{replyId} {
      // Allow anyone to read replies.
      allow get, list: if true;

      // Only allow creating a reply if the authenticated user is signed in.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;

      // Only allow updating a reply if the authenticated user is the author of the reply and the document exists.
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);

      // Only allow deleting a reply if the authenticated user is the author of the reply and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
    
    /**
     * @description Rules for comments within a forum post.
     * @path /forumPosts/{postId}/comments/{commentId}
     * @allow (create) User with UID 'user123' can create a comment.
     */
    match /forumPosts/{postId}/comments/{commentId} {
        // Allow anyone to read comments.
        allow get, list: if true;
        
        // Only allow creating a comment if the authenticated user is signed in.  Assume, since there's no authorId on the comment itself, the user can create it.
        allow create: if isSignedIn();

        // Only allow updating a comment if the user is an admin.
        allow update: if isAdmin();

        // Only allow deleting a comment if the user is an admin.
        allow delete: if isAdmin();
    }
  }
}