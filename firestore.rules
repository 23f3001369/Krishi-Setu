/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for farmer data and implements role-based access for admin users.
 * All farmer-related data is nested under /farmers/{farmerId}, where {farmerId} corresponds to the Firebase Auth UID.
 * Weather forecasts and learning articles are publicly readable.
 * Admin privileges are determined by the existence of a document in the `/roles_admin/{uid}` collection, where {uid} is the user's UID.
 * To simplify authorization, the `farmerId` is denormalized onto `Farm` documents.
 *
 * Key Security Decisions:
 * - Users can only read and write their own farmer profile and related data.
 * - Public read access is granted for weather forecasts and learning articles.
 * - Admin users can bypass certain restrictions.
 * - User listing is disallowed for privacy reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for /farmers/{farmerId} collection.
     * @path /farmers/{farmerId}
     * @allow (create) User with UID 'user_abc' creates a document with id 'user_abc'.
     * @deny (create) User with UID 'user_def' attempts to create a document with id 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId} {
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rule for /farmers/{farmerId}/transactions/{transactionId} collection.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' creates a new transaction under /farmers/user_abc/.
     * @deny (create) User with UID 'user_def' attempts to create a new transaction under /farmers/user_abc/.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rule for /farmers/{farmerId}/cultivationGuides/{guideId} collection.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create) User with UID 'user_abc' creates a new guide under /farmers/user_abc/.
     * @deny (create) User with UID 'user_def' attempts to create a new guide under /farmers/user_abc/.
     * @principle Enforces document ownership for writes.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId) && request.resource.data.userId == farmerId;
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rule for /farms/{farmId} collection.
     * @path /farms/{farmId}
     * @allow (create) User with UID 'user_abc' creates a farm with farmerId = 'user_abc'.
     * @deny (create) User with UID 'user_def' creates a farm with farmerId = 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /farms/{farmId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.farmerId);
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Rule for /weather_forecasts/{weatherForecastId} collection.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get) Any user can get weather forecast data.
     * @allow (list) Any user can list weather forecast data.
     * @deny (create) No one can create weather forecast data.
     * @principle Public read access with no write access.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for /learning_articles/{learningArticleId} collection.
     * @path /learning_articles/{learningArticleId}
     * @allow (get) Any user can get a learning article.
     * @allow (list) Any user can list learning articles.
     * @deny (create) No one can create learning articles.
     * @principle Public read access with no write access.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Rule for /roles_admin/{uid} collection.
      * @path /roles_admin/{uid}
      * @allow (get) Admin user can read their own admin role document.
      * @deny (create) Non-admin user attempts to create an admin role document.
      * @principle Restricts access to admin role documents to only admin users.
      */
    match /roles_admin/{uid} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rule for /forumPosts/{postId} collection.
     * @path /forumPosts/{postId}
     * @allow (get) Any user can get a forum post.
     * @allow (list) Any user can list forum posts.
     * @allow (create) Any authenticated user can create a forum post.
     * @deny (update) Non-owner attempts to update a forum post.
     * @principle Public read access with owner-only writes.
     */
    match /forumPosts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rule for /forumPosts/{postId}/comments/{commentId}/replies/{replyId} collection.
     * @path /forumPosts/{postId}/comments/{commentId}/replies/{replyId}
     * @allow (get) Any user can get a reply.
     * @allow (list) Any user can list replies.
     * @allow (create) Any authenticated user can create a reply.
     * @deny (update) Non-owner attempts to update a reply.
     * @principle Public read access with owner-only writes.
     */
    match /forumPosts/{postId}/comments/{commentId}/replies/{replyId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rule for /chats/{chatId} collection.
     * @path /chats/{chatId}
     * @allow (get) Only participants can get a chat.
     * @allow (list) Only participants can list chats.
     * @allow (create) Any authenticated user can create a chat if they are a participant.
     * @deny (update) Non-participants attempt to update a chat.
     * @principle Shared access based on participant list.
     */
    match /chats/{chatId} {
        allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow list: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow create: if isSignedIn() && request.resource.data.participants.hasAll([request.auth.uid]);
        allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
        allow delete: if false;
    }

    /**
     * @description Rule for /chats/{chatId}/messages/{messageId} collection.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get) Only participants of the chat can get a message.
     * @allow (list) Only participants of the chat can list messages.
     * @allow (create) Any authenticated user can create a message if they are a participant of the chat.
     * @deny (update) No one can update a message.
     * @principle Shared access based on participant list.
     */
    match /chats/{chatId}/messages/{messageId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow list: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      allow create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}