rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to farmer profiles.
     * @path /farmers/{farmerId}
     * @allow (create) If the user's UID matches the 'farmerId'.
     * @allow (get, list, update, delete) If the user's UID matches the 'farmerId'.
     * @deny (create) If the user's UID does not match the 'farmerId'.
     * @deny (get, list, update, delete) If the user's UID does not match the 'farmerId'.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(farmerId);
      allow list: if false;
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Controls access to farmer transactions.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create, get, list, update, delete) If the user's UID matches the 'farmerId'.
     * @deny (create, get, list, update, delete) If the user's UID does not match the 'farmerId'.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Controls access to farmer cultivation guides.
     * @path /farmers/{farmerId}/cultivationGuides/{guideId}
     * @allow (create, get, list, update, delete) If the user's UID matches the 'farmerId'.
     * @deny (create, get, list, update, delete) If the user's UID does not match the 'farmerId'.
     * @principle Restricts access to a user's own data tree.
     */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow create: if isOwner(farmerId);
      allow update: if isOwner(farmerId);
      allow delete: if isOwner(farmerId);
    }

    /**
     * @description Controls access to farm data.
     * @path /farms/{farmId}
     * @allow (create, get, list, update, delete) If the user's UID matches the 'farmerId' on the document.
     * @deny (create) If the user's UID does not match the 'farmerId' on the request.
     * @deny (get, list, update, delete) If the user's UID does not match the 'farmerId' on the document.
     * @principle Enforces document ownership based on the 'farmerId' field.
     */
    match /farms/{farmId} {
      allow get: if request.auth != null && resource.data.farmerId == request.auth.uid;
      allow list: if request.auth != null && resource.data.farmerId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.farmerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.farmerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.farmerId == request.auth.uid;
    }

    /**
     * @description Controls access to weather forecast data.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No public write access.
     * @principle Allows public read access to weather data.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to learning articles.
     * @path /learning_articles/{learningArticleId}
     * @allow (get, list) Public read access.
     * @deny (create, update, delete) No public write access.
     * @principle Allows public read access to learning articles.
     */
    match /learning_articles/{learningArticleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
         * @description Manages admin roles.
         * @path /roles_admin/{uid}
         * @allow (get, create, update, delete) Only accessible by an authenticated user to manage their own role.
         * @deny (get, create, update, delete) If the user is not authenticated or trying to access another user's role.
         * @principle Existence of a document grants admin privileges.
         */
        match /roles_admin/{uid} {
            function isSignedIn() {
                return request.auth != null;
            }

            allow get: if isSignedIn() && request.auth.uid == uid;
            allow list: if false;
            allow create: if isSignedIn() && request.auth.uid == uid;
            allow update: if isSignedIn() && request.auth.uid == uid;
            allow delete: if isSignedIn() && request.auth.uid == uid;
        }
  }
}