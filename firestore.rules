/**
 * @fileoverview Firestore Security Rules for the AgriVaani application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal farmer data and farm management,
 * while allowing public read access to weather forecasts and learning articles. It uses path-based
 * authorization for user-specific data and denormalizes ownership for efficient access control.
 *
 * Data Structure:
 * - /farmers/{farmerId}: Stores farmer profiles, with 'farmerId' matching the Firebase Auth UID.
 * - /farmers/{farmerId}/transactions/{transactionId}: Stores financial transactions for each farmer.
 * - /farmers/{farmerId}/cultivationGuides/{guideId}: Stores cultivation guides for each farmer.
 * - /farms/{farmId}: Stores farm data, including a 'farmerId' field indicating ownership.
 * - /weather_forecasts/{weatherForecastId}: Stores weather forecast data (publicly readable).
 * - /learning_articles/{learningArticleId}: Stores learning articles (publicly readable).
 * - /roles_admin/{uid}: Stores admin roles, with document existence granting admin status.
 * - /forumPosts/{postId}: Stores posts for the community forum.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Weather forecasts and learning articles are publicly readable.
 * - Admin roles are managed via a separate collection for clear separation of concerns.
 *
 * Denormalization for Authorization:
 * - The 'Farm' entity includes a 'farmerId' field to simplify ownership checks, avoiding the need for
 *   expensive 'get()' calls to the /farmers collection. This ensures that checking farm ownership
 *   can be done directly within the /farms/{farmId} rule.
 *
 * Structural Segregation:
 * - User-specific data (farmers, transactions, cultivation guides) is stored under the /farmers/{farmerId}
 *   path, while public data (weather forecasts, learning articles) is stored in separate top-level
 *   collections. This segregation simplifies access control and improves security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource (for update/delete).
     * @param {string} userId - The user ID to compare against the resource's data and the request's auth UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /farmers collection.
     * @path /farmers/{farmerId}
     * @allow (create) If the user is signed in and their UID matches the farmerId.
     * @deny (create) If the user is not signed in or their UID does not match the farmerId.
     * @allow (get) If the user is the owner.
     * @deny (get) If the user is not the owner.
     * @allow (list) If the user is the owner.
     * @deny (list) Always deny, no public listing of users.
     * @allow (update) If the user is the owner.
     * @deny (update) If the user is not the owner.
     * @allow (delete) If the user is the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId} {
      allow create: if isOwner(farmerId) && request.resource.data.id == farmerId;
      allow get: if isOwner(farmerId);
      allow list: if false;
      allow update: if isExistingOwner(farmerId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for the /farmers/{farmerId}/transactions collection.
     * @path /farmers/{farmerId}/transactions/{transactionId}
     * @allow (create) If the user is the owner.
     * @deny (create) If the user is not the owner.
     * @allow (get) If the user is the owner.
     * @deny (get) If the user is not the owner.
     * @allow (list) If the user is the owner.
     * @deny (list) If the user is not the owner.
     * @allow (update) If the user is the owner.
     * @deny (update) If the user is not the owner.
     * @allow (delete) If the user is the owner.
     * @deny (delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /farmers/{farmerId}/transactions/{transactionId} {
      allow create: if isOwner(farmerId);
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId);
      allow delete: if isExistingOwner(farmerId);
    }

     /**
      * @description Rules for the /farmers/{farmerId}/cultivationGuides collection.
      * @path /farmers/{farmerId}/cultivationGuides/{guideId}
      * @allow (create) If the user is the owner.
      * @deny (create) If the user is not the owner.
      * @allow (get) If the user is the owner.
      * @deny (get) If the user is not the owner.
      * @allow (list) If the user is the owner.
      * @deny (list) If the user is not the owner.
      * @allow (update) If the user is the owner.
      * @deny (update) If the user is not the owner.
      * @allow (delete) If the user is the owner.
      * @deny (delete) If the user is not the owner.
      * @principle Enforces document ownership for all operations.
      */
    match /farmers/{farmerId}/cultivationGuides/{guideId} {
      allow create: if isOwner(farmerId) && request.resource.data.userId == farmerId;
      allow get: if isOwner(farmerId);
      allow list: if isOwner(farmerId);
      allow update: if isExistingOwner(farmerId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(farmerId);
    }

    /**
     * @description Rules for the /farms collection.
     * @path /farms/{farmId}
     * @allow (create) If the user is signed in and the 'farmerId' field matches their UID.
     * @deny (create) If the user is not signed in or the 'farmerId' field does not match their UID.
     * @allow (get) If true (public read).
     * @deny (get) Never deny.
     * @allow (list) If true (public read).
     * @deny (list) Never deny.
     * @allow (update) If the user is the owner (farmerId matches UID).
     * @deny (update) If the user is not the owner.
     * @allow (delete) If the user is the owner (farmerId matches UID).
     * @deny (delete) If the user is not the owner.
     * @principle Public read, owner-only writes, enforces ownership on writes.
     */
    match /farms/{farmId} {
      allow create: if isSignedIn() && request.resource.data.farmerId == request.auth.uid;
      allow get: if true;
      allow list: if true;
      allow update: if isExistingOwner(resource.data.farmerId);
      allow delete: if isExistingOwner(resource.data.farmerId);
    }

    /**
     * @description Rules for the /weather_forecasts collection.
     * @path /weather_forecasts/{weatherForecastId}
     * @allow (create) If admin.
     * @deny (create) If not admin.
     * @allow (get) If true (public read).
     * @deny (get) Never deny.
     * @allow (list) If true (public read).
     * @deny (list) Never deny.
     * @allow (update) If admin.
     * @deny (update) If not admin.
     * @allow (delete) If admin.
     * @deny (delete) If not admin.
     * @principle Public read, admin-only writes.
     */
    match /weather_forecasts/{weatherForecastId} {
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /learning_articles collection.
     * @path /learning_articles/{learningArticleId}
     * @allow (create) If admin.
     * @deny (create) If not admin.
     * @allow (get) If true (public read).
     * @deny (get) Never deny.
     * @allow (list) If true (public read).
     * @deny (list) Never deny.
     * @allow (update) If admin.
     * @deny (update) If not admin.
     * @allow (delete) If admin.
     * @deny (delete) If not admin.
     * @principle Public read, admin-only writes.
     */
    match /learning_articles/{learningArticleId} {
      allow create: if isAdmin();
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Rules for the /roles_admin collection.
     * @path /roles_admin/{uid}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @allow (get) If the user is an admin.
     * @deny (get) If the user is not an admin.
     * @allow (list) If the user is an admin.
     * @deny (list) If the user is not an admin.
     * @allow (update) If the user is an admin.
     * @deny (update) If the user is not an admin.
     * @allow (delete) If the user is an admin.
     * @deny (delete) If the user is not an admin.
     * @principle Admin only access
     */
    match /roles_admin/{uid} {
      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /forumPosts collection.
     * @path /forumPosts/{postId}
     */
    match /forumPosts/{postId} {
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow get: if true;
      allow list: if true;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;

      /**
       * @description Rules for the /forumPosts/{postId}/likes collection.
       * @path /forumPosts/{postId}/likes/{likeId}
       */
      match /forumPosts/{postId}/likes/{likeId} {
        allow create: if isSignedIn() && request.auth.uid == likeId && request.resource.data.userId == request.auth.uid;
        allow get: if true;
        allow list: if true;
        allow update: if false;
        allow delete: if isSignedIn() && request.auth.uid == likeId;
      }
    }
  }
}